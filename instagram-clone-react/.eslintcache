[{"/Users/jasonkang/Desktop/sandbox/react-samples/instagram-clone-react/instagram-clone-react/src/Post.js":"1","/Users/jasonkang/Desktop/sandbox/react-samples/instagram-clone-react/instagram-clone-react/src/App.js":"2","/Users/jasonkang/Desktop/sandbox/react-samples/instagram-clone-react/instagram-clone-react/src/firebase.js":"3","/Users/jasonkang/Desktop/sandbox/react-samples/instagram-clone-react/instagram-clone-react/src/ImageUpload.js":"4"},{"size":2215,"mtime":1610037962503,"results":"5","hashOfConfig":"6"},{"size":6249,"mtime":1610041199225,"results":"7","hashOfConfig":"6"},{"size":639,"mtime":1608852727360,"results":"8","hashOfConfig":"6"},{"size":1880,"mtime":1609520311878,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"10ey8ti",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jasonkang/Desktop/sandbox/react-samples/instagram-clone-react/instagram-clone-react/src/Post.js",["20"],"import React, { useState, useEffect } from 'react'\nimport \"./Post.css\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { db } from \"./firebase\" \nimport firebase from \"firebase\";\n\nfunction Post({ postId, user, username, caption, imageUrl }) {\n  const [comments, setComments] = useState([]);\n  const [comment, setComment] = useState(\"\");\n   \n  useEffect(() => {\n    let unsubscribe;\n    if (postId) {\n      unsubscribe = db\n        .collection(\"posts\")\n        .doc(postId)\n        .collection(\"comments\")\n        .orderBy(\"timestamp\", \"desc\" )\n        .onSnapshot((snapshot) => {\n          setComments(snapshot.docs.map((doc) => doc.data()))\n        });\n    } \n\n    return () => { \n      unsubscribe();\n    };\n  }, [postId]);\n\n  const postComment = (event) => {\n    event.preventDefault();\n    db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n      text: comment, \n      username: user.displayName,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    setComment(\"\");\n  } \n  \n  return (\n    <div className=\"post\">\n      <div className=\"post__header\">\n        <Avatar\n          className=\"post__avatar\"\n          alt=\"Jason\"\n          src=\"/static/images/avatar/1.jpg\"\n        />\n        <h3>{username}</h3>\n        {/* header -> avatar+ username */}\n      </div>\n      \n\n      <img\n        className=\"post__image\"\n        src={imageUrl}\n      />\n      {/* image */}\n\n      <h4 className=\"post__text\"><strong>{username}</strong> {caption}</h4>\n      {/* username + caption */}\n      <div className=\"post__comment\">\n        {comments.map((comment) => (\n        <p>\n          <strong>{comment.username}</strong> {comment.text}\n        </p>\n        ))}\n      </div>\n\n      {user && (\n        <form className=\"post__commentBox\">\n        <input\n          className=\"post__input\"\n          type=\"text\"\n          placeholder=\"Add a comment...\"\n          value={comment}\n          onChange={(e) => setComment(e.target.value)}\n        />\n        <button\n          disabled={!comment}\n          className=\"post__button\"\n          type=\"submit\"\n          onClick={postComment}\n        >\n          Post\n          </button>\n      </form>\n      )}\n    </div>\n  )\n}\n\nexport default Post\n","/Users/jasonkang/Desktop/sandbox/react-samples/instagram-clone-react/instagram-clone-react/src/App.js",[],["21","22"],"/Users/jasonkang/Desktop/sandbox/react-samples/instagram-clone-react/instagram-clone-react/src/firebase.js",[],"/Users/jasonkang/Desktop/sandbox/react-samples/instagram-clone-react/instagram-clone-react/src/ImageUpload.js",[],{"ruleId":"23","severity":1,"message":"24","line":52,"column":7,"nodeType":"25","endLine":55,"endColumn":9},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["30"],"no-negated-in-lhs",["31"],"no-global-assign","no-unsafe-negation"]